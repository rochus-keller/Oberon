// Source: The Programming Language Oberon, Revision 1.10.2013 / 3.5.2016, Niklaus Wirth
// Download: https://www.inf.ethz.ch/personal/wirth/Oberon/Oberon07.Report.pdf
// Adapted and modified 2019, 2020 by Rochus Keller <mailto:me@rochus-keller.ch>

// Modification Steps:
// - manually copied all productions from PDF to EbnfStudio and adapted syntax
// - added top
// - disabled/designated lexer productions
// - removed LL(1) first/first and first/follow ambiguities
// - renamed case to Case because of C++ keyword
// - modified selector and removed ActualParams so parser needs no type info 
// - added variableOrFunctionCall to remind that factor can include ActualParams
// - allow FieldListSequence to have trailing ';' as seen in the ProjectOberon source 
// - added explicit ReturnStatement with optional closing semi
// - added explicit LengthList 
// - added hexchar and hexstring
// - added explicit Elsif/ElseStatement 
// - integrated DEFINITION syntax
// - made LengthList optional in ArrayType (like Oberon-2)
// - added type-bound procedures from Oberon-2
// - added paths to import; most right element of the path is the module name
// - added enumerations, adopted from Pascal scalar type
// - added shortcuts: BEGIN or DO, PROCEDURE or PROC, POINTER TO or '^', ARRAY n OF or '[n]'
// - made all semicolons ';' optional
// - added const VAR params using the IN keyword
// - allow more than one TYPE, CONST, VAR in declaration sequence in arbitrary order interleaved with procedures
// - added '-' to identdef as in Oberon-2 (only effective on RECORD level, MODULE level als '*' is read-only)
// - added WITH, LOOP, EXIT statements from Oberon-2 for backward compatibility
// - added syntax elements to parse Blackbox Component Pascal 1.7
// - made end ident of procedures optional
// - added UNSAFE POINTER, CSTRUCT,  CUNION and CARRAY for external C library integration
// - switched to generic modules (instead of generic types, similar to a subset of Ada) to avoid semantic complexities
// - allow import lists to occur several times interleaved with declaration sequence; optional commas between imports
// - optional commas in FPSection, IdentList, enumeration and TypeParams
// - UNSAFE POINTER TO deprecated by CPOINTER TO and '*'; VOID is a predeclared identifier which can be used as *VOID
// - SystemAttrs
// - Generic type vs const params

// without any define it's Oberon-07 syntax; Oberon 90 syntax requires OBN2
#define OBN2 // Oberon-2
// combine OBN2 with either OBNX or BBOX
// #define OBNX // Oberon+
// #define BBOX // Component Pascal

/// Top
Oberon ::=  module | definition // also in OBX we require one module or definition per file

/// 3. Vocabulary

// letter ::= 'A' | 'B' | ... | 'Z' | 'a' | 'b' | ... | 'z'

// digit ::=  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

// hexDigit ::= digit | 'A' | 'B' | 'C' | 'D' | 'E' | 'F'

ident ::= // letter {letter | digit}

integer ::= // digit {digit} | digit {hexDigit} 'H'

real ::= // digit {digit} '.' {digit} [ScaleFactor]

ScaleFactor- ::= // 'E' ['+' | '-'] digit {digit}

number ::= integer | real

string ::= // '"' {character} '"' | digit {hexDigit} 'X', also multiline hex strings $ ... $ seen in PO source
hexchar ::=
hexstring ::= 

hexstringdelim- ::= '$'

comment- ::= '(*' '*)' '//'
// line comments like in BCPL and Delphi/Free Pascal

directive- ::= '<*' '*>' // oadkwood source code directive
#ifdef SCD_LANG
directive	::= '<*' [ scdOpt | scdIf | scdElsif | scdElse | scdEnd ] '*>'
scdOpt 	::= ident ( '+' | '-' )
scdIf    	::= IF scdExpr THEN 
scdElsif 	::= ELSIF scdExpr THEN 
scdElse 	::= ELSE
scdEnd 	::= END
scdExpr 	::= scdTerm { OR scdTerm }
scdTerm 	::= scdFactor {'&' scdFactor}
scdFactor 	::= ident | '(' scdExpr ')' | '~' scdFactor
#endif


/// 4. Declarations and scope rules

qualident ::= [ \LL:2\ ident '.' ] ident  // works even though EbnfStudio disagrees

identdef ::= ident [ '*'
#ifdef OBN2
	| '-'
#endif
	] 

/// 5. Constant declarations

ConstDeclaration ::= identdef '=' ConstExpression

ConstExpression* ::= expression

/// 6. Type declarations

TypeDeclaration ::= identdef 	'=' type

type ::= NamedType 
#ifdef OBNX
	| enumeration
#endif 
	| ArrayType | RecordType | PointerType | ProcedureType

NamedType ::= qualident 

#ifdef OBNX
MetaParams ::= '(' MetaSection { [';'] MetaSection } ')'

MetaSection ::= [ TYPE | CONST ] ident { \LL:2\ [','] ident } [ ':' NamedType ]

MetaActuals ::= '(' ConstExpression { [','] ConstExpression } ')' 

enumeration ::= '('  ident { [','] ident } ')' 
#endif

/// 6.1. Basic types

/// 6.2. Array types

ArrayType ::= ( ARRAY 
#ifdef OBNX
	| CARRAY
#endif
	)
#ifdef BBOX
	[ SysFlag ]
#endif
#ifdef OBN2
	[ LengthList ]
#else
	LengthList
#endif
	 OF type 
#ifdef OBNX
	 | '[' [ LengthList ] ']' type
#endif

LengthList ::= length {',' length} 
#ifdef OBNX
	| VAR vlength { ',' vlength }

vlength* ::= expression // allow VLA for local vars where length is dependent on runtime provided value
#endif

length* ::= ConstExpression 

#ifdef BBOX
SysFlag ::=  '[' ConstExpression ']' 
SysString ::= string
#endif

/// 6.3. Record types

RecordType ::= 
#ifdef BBOX
	[ 'ABSTRACT' | 'EXTENSIBLE' | 'LIMITED' ] // RecAttributes
#endif
	( RECORD 
#ifdef OBNX
	| CSTRUCT
	| CUNION
#endif
	)
#ifdef BBOX
	[ SysFlag ]
#endif
	['(' BaseType ')'] [FieldListSequence]  END 

BaseType ::= NamedType

FieldListSequence ::= FieldList 
#ifdef OBNX
	[ ';' ] { FieldList [ ';' ] }
#else
	{';' [FieldList] } // added support for empty ';' due to PO code
#endif

FieldList ::= [WEAK] IdentList ':' type

IdentList ::= identdef { [','] identdef}

/// 6.4. Pointer types

PointerType ::= ( 
	POINTER 
#ifdef BBOX
		[ SysFlag ]
#endif
		TO
#ifdef OBNX
	| '^'  // abbreviation for POINTER TO
	| CPOINTER TO
	| '*'  // abbreviation for CPOINTER TO/UNSAFE POINTER TO
#endif
	 ) type

/// 6.5. Procedure types

ProcedureType ::= ( PROCEDURE 
#ifdef OBNX
	| PROC 
#endif 
	) 
#ifdef OBNX
	[  '^' | \LL:2\ '(' [ POINTER | '^' ]  ')'  ] 
#endif 
#ifdef BBOX
	[ SysFlag ]
#endif
	[FormalParameters]

/// 7. Variable declarations

VariableDeclaration ::= [WEAK] IdentList ':' type

/// 8. Expressions

/// 8.1. Operands

designator ::= qualident {selector}
#ifdef BBOX
	[ '$' ]
#endif

selector ::= '.' ident | '[' ExpList ']' | '^'  
	| '(' [ ExpList ] ')' // substitute for (qualident) and ActualParameters
	// original: | '(' qualident ')'  // typeguard, nur unterscheidbar von ActualParams wenn qualident ein Type ist
	// Man also Oberon in der Originalsyntax ohne Typeninformation nicht parsen!

ExpList ::= expression {',' expression}

/// 8.2. Operators

expression ::= SimpleExpression [ relation SimpleExpression ]

relation ::= '=' | '#' | '<' | '<=' | '>' | '>=' | IN | IS

SimpleExpression ::= ['+' | '-'] term { AddOperator term }

AddOperator ::= '+' | '-' | OR

term ::= factor {MulOperator factor}

MulOperator ::= '*' | '/' | DIV | MOD | '&'

literal ::= number | string | hexstring | hexchar | NIL | set 
#ifndef BBOX
	| TRUE | FALSE // in Oberon-2 and Blackbox these are just predeclared consts
#endif

factor ::= literal
	| variableOrFunctionCall // replaces: designator [ActualParameters]
	| '(' expression ')' | '~' factor

variableOrFunctionCall ::= designator // designator enthält neu auch: [ ActualParameters ] 
	
set ::= '{' [ element {',' element} ] '}'

element ::= expression ['..' expression]

ActualParameters- ::= '(' [ ExpList ] ')'  

/// 9. Statements

statement ::=
	assignmentOrProcedureCall
	| IfStatement | CaseStatement |
#ifdef OBN2
	WithStatement |
	LoopStatement |
	ExitStatement |
	ReturnStatement |
#endif
	WhileStatement | RepeatStatement | ForStatement
	
/// 9.1. Assignments

/// 9.2. Procedure calls

// merge of assignment and ProcedureCall
assignmentOrProcedureCall ::=
	designator 
	[
		':=' expression // assignment
		// designator enthält neu auch Params: | [ ActualParameters ] // ProcedureCall
	]
	
assignment- ::= designator ':=' expression

ProcedureCall- ::= designator [ ActualParameters ]

/// 9.3. Statement sequences

StatementSequence ::= 
#ifdef OBNX
	{ ';' } { statement { ';' } }  // in OS/OR we find things like "BEGIN;" or "statement;;"
#else
	[ statement ] { ';' [ statement ] } // doesn't work with "statement RETURN" which appears in Oberon-07
#endif

/// 9.4. If statements

IfStatement ::= IF expression THEN StatementSequence
	{ ElsifStatement }
	[ ElseStatement ] END
ElsifStatement ::= ELSIF expression THEN StatementSequence 
ElseStatement ::= ELSE StatementSequence

/// 9.5. Case statements

CaseStatement ::= CASE expression OF Case { '|' Case }
#ifdef OBN2
	[ ELSE StatementSequence ]
#endif
	END

Case ::= [ CaseLabelList ':' StatementSequence ]

CaseLabelList ::= LabelRange { ',' LabelRange }

LabelRange ::= label [ '..' label ]

label ::= 
#ifdef OBN2
	ConstExpression
#else
	integer 
	| string | hexchar | hexstring 
	| qualident
#endif

/// 9.6. While statements

WhileStatement ::= WHILE expression DO StatementSequence
	{ElsifStatement2} END
ElsifStatement2 ::= ELSIF expression DO StatementSequence 

/// 9.7. Repeat Statements

RepeatStatement ::= REPEAT StatementSequence UNTIL expression

/// 9.8. For statements

ForStatement ::= FOR ident ':=' expression TO expression [ BY ConstExpression ]
	DO StatementSequence END

#ifdef OBN2
WithStatement ::= WITH [ '|' ] Guard DO StatementSequence
	{ '|' Guard DO StatementSequence}
	[ ELSE StatementSequence ] END
Guard ::= qualident ':' qualident

LoopStatement ::= LOOP StatementSequence END

ExitStatement ::= EXIT
#endif

/// 10. Procedure declarations
ProcedureDeclaration ::= 
#ifdef OBN2
	\LL:2\ PROCEDURE ( '^' | '-' ) [Receiver] identdef [ FormalParameters ] [ literal ] 
	// OBN87/90 allows forward declarations (^) and external declarations (-)
#ifdef BBOX
	MethAttributes
#endif
	| 
#endif
#ifdef BBOX
	ProcedureHeading  [ \LL:2\ ',' ident ] // MethAttributes embedded
	( \LL:2\ ',' ( 'ABSTRACT' | 'EMPTY' ) 
	| ',' 'EXTENSIBLE' ';'  ProcedureBody [ ident ]
	| integer { ',' integer } // requires [code] to have at least one number, so modifications required!
	| ';'  ProcedureBody [ ident ]
	)
#else
	ProcedureHeading [ ';' ] ProcedureBody [ ident ]
#endif

#ifdef BBOX
MethAttributes ::= [ \LL:2\ ',' ident ] [ ',' ( 'ABSTRACT' | 'EXTENSIBLE' | 'EMPTY' ) ]  // ident to avoid NEW keyword
#endif

ProcedureHeading ::= ( PROCEDURE | PROC )
#ifdef OBN2
	[ '*' | '+' ]  // the star is from Oberon 87 (ignored)
#endif
#ifdef BBOX
	[ SysFlag ]
#endif
#ifdef OBN2
	[Receiver]
#endif
	 identdef 
#ifdef BBOX
	[ '[' SysString { ',' SysString } ']' ]
#endif
	 [ FormalParameters ]

#ifdef OBN2
Receiver ::= '(' [ VAR 
#ifdef BBOX
	| IN
#endif
	] ident ':' ident
	')'
#endif

ProcedureBody ::= DeclarationSequence 
	[ ( BEGIN | DO ) StatementSequence
#ifdef OBN2
	| ReturnStatement [ ';' ]
#endif
	 ]
#ifndef OBN2
	[ ReturnStatement [ ';' ] ] 
#endif
	END
	
DeclarationSequence ::= 
#ifdef OBNX
	{ CONST { ConstDeclaration [';'] } 
	| TYPE { TypeDeclaration [';'] } 
	| VAR { VariableDeclaration [';'] } 
	| ProcedureDeclaration [';'] }
#else
#ifdef BBOX
	{ CONST { ConstDeclaration ';' } 
	| TYPE { TypeDeclaration ';' }
	| VAR { VariableDeclaration ';' } }
#else
	[ CONST { ConstDeclaration ';' } ]
	[ TYPE { TypeDeclaration ';' } ]
	[ VAR { VariableDeclaration ';' } ]
#endif
	{ ProcedureDeclaration ';' }
#endif

ReturnStatement ::= RETURN 
#ifdef OBN2
	[ expression ] // leads to LL(k) ambig with qualident statement; resolve by checking if proc has return type
#else
	expression 
#endif

DeclarationSequence2 ::= 
#ifdef OBNX
	{ CONST { ConstDeclaration [';'] }
	| TYPE { TypeDeclaration [';'] }
	| VAR { VariableDeclaration [';'] }
	| ProcedureHeading [SystemAttrs] [';'] } // difference to DeclarationSequence
#else
#ifdef BBOX
	{ CONST { ConstDeclaration ';' } 
	| TYPE { TypeDeclaration ';' }
	| VAR { VariableDeclaration ';' } }
	{ ProcedureHeading MethAttributes ';' }
#else	
	[ CONST { ConstDeclaration ';' } ]
	[ TYPE { TypeDeclaration ';' } ]
	[ VAR { VariableDeclaration ';' } ]
	{ ProcedureHeading ';' }
#endif
#endif

/// 10.1. Formal parameters

FormalParameters ::= '(' [ FPSection { 
#ifdef OBNX
	[';'] 
#else
	';'
#endif
	FPSection } ] ')' 
#ifdef BBOX
	[ ':' type ]
#else
#ifdef OBNX
	[ ':' ReturnType ]
#else
	[ ':' NamedType ]
#endif
#endif

#ifdef OBNX
ReturnType ::= type // too complicated: NamedType | ( POINTER TO | '^'|'*'| CPOINTER TO) NamedType
#endif

FPSection ::= [ VAR 
#ifdef OBNX
	| IN 
#endif
#ifdef BBOX
	| IN | OUT
#endif
	] 
#ifdef BBOX
	[ SysFlag ]
#endif
	ident { [','] ident } ':' FormalType 

FormalType ::= 
#ifdef OBN2
	type
#else
	{ ARRAY OF
#ifdef OBNX
	| '[' ']'
#endif
	 }  NamedType
#endif

/// 10.2. Predefined procedures

/// 11. Modules

module ::= MODULE ident 
#ifdef OBNX
	[ MetaParams ] 
#endif 
	(
#ifdef BBOX
	'[' SysString ']'  ';' [ ImportList ] DeclarationSequence2 END ident '.'
	|
#endif
	[';'] 
#ifdef OBNX
	{ ImportList | DeclarationSequence }
#else
	[ ImportList ] DeclarationSequence
#endif
	[ ( BEGIN 
#ifdef OBNX
	| DO 
#endif
	) StatementSequence ] 
#ifdef BBOX
	[ CLOSE StatementSequence ]
#endif
	END ident ['.'] )

ImportList ::= IMPORT import { [ ',' ] import } [';']

import ::= [ \LL:2\ ident ':=' ] ident 
#ifdef OBNX
	{ '.' ident } // NOTE: paths are not case sensitive 
	[ MetaActuals ] 
#endif

/// 11.1 The Module SYSTEM

/// Definitions

definition ::= DEFINITION ident 
#ifdef OBNX
	[ SystemAttrs ] 
#endif 
	[';']  [ ImportList ] DeclarationSequence2 END ident ['.']

#ifdef OBNX
SystemAttrs ::= '[' [ SysAttr { ',' SysAttr } ] ']'
SysAttr ::= ident { ConstExpression }
#endif 

/// Helper Tokens
Comment ::=
#ifndef OBNX
obnx- ::= PROC UNSAFE CSTRUCT CUNION CARRAY CPOINTER
#endif
#ifndef OBN2
obn2- ::= WITH LOOP EXIT
#endif

/// Pragmas
%module ::= 'Oberon'
%namespace ::= 'Ob'
%suppress ::= ';' ',' '.' ':'
