#ifndef __OB_PARSER__
#define __OB_PARSER__
// This file was automatically generated by EbnfStudio; don't modify it!

#include <Oberon/ObSynTree.h>

namespace Ob {

	class Scanner {
	public:
		virtual Token next() = 0;
		virtual Token peek(int offset) = 0;
	};

	class Parser {
	public:
		Parser(Scanner* s):scanner(s) {}
		void RunParser();
		SynTree root;
		struct Error {
		    QString msg;
		    int row, col;
		    QString path;
		    Error( const QString& m, int r, int c, const QString& p):msg(m),row(r),col(c),path(p){}
		};
		QList<Error> errors;
	protected:
		void Oberon(SynTree*);
		void number(SynTree*);
		void qualident(SynTree*);
		void identdef(SynTree*);
		void ConstDeclaration(SynTree*);
		void ConstExpression(SynTree*);
		void TypeDeclaration(SynTree*);
		void type(SynTree*);
		void NamedType(SynTree*);
		void ArrayType(SynTree*);
		void LengthList(SynTree*);
		void length(SynTree*);
		void RecordType(SynTree*);
		void BaseType(SynTree*);
		void FieldListSequence(SynTree*);
		void FieldList(SynTree*);
		void IdentList(SynTree*);
		void PointerType(SynTree*);
		void ProcedureType(SynTree*);
		void VariableDeclaration(SynTree*);
		void designator(SynTree*);
		void selector(SynTree*);
		void ExpList(SynTree*);
		void expression(SynTree*);
		void relation(SynTree*);
		void SimpleExpression(SynTree*);
		void AddOperator(SynTree*);
		void term(SynTree*);
		void MulOperator(SynTree*);
		void literal(SynTree*);
		void factor(SynTree*);
		void variableOrFunctionCall(SynTree*);
		void set(SynTree*);
		void element(SynTree*);
		void statement(SynTree*);
		void assignmentOrProcedureCall(SynTree*);
		void StatementSequence(SynTree*);
		void IfStatement(SynTree*);
		void ElsifStatement(SynTree*);
		void ElseStatement(SynTree*);
		void CaseStatement(SynTree*);
		void Case(SynTree*);
		void CaseLabelList(SynTree*);
		void LabelRange(SynTree*);
		void label(SynTree*);
		void WhileStatement(SynTree*);
		void ElsifStatement2(SynTree*);
		void RepeatStatement(SynTree*);
		void ForStatement(SynTree*);
		void WithStatement(SynTree*);
		void Guard(SynTree*);
		void LoopStatement(SynTree*);
		void ExitStatement(SynTree*);
		void ProcedureDeclaration(SynTree*);
		void ProcedureHeading(SynTree*);
		void Receiver(SynTree*);
		void ProcedureBody(SynTree*);
		void DeclarationSequence(SynTree*);
		void ReturnStatement(SynTree*);
		void DeclarationSequence2(SynTree*);
		void FormalParameters(SynTree*);
		void FPSection(SynTree*);
		void FormalType(SynTree*);
		void module(SynTree*);
		void ImportList(SynTree*);
		void import(SynTree*);
		void definition(SynTree*);
	protected:
		Token cur;
		Token la;
		Scanner* scanner;
		void next();
		Token peek(int off);
		void invalid(const char* what);
		bool expect(int tt, bool pkw, const char* where);
		void addTerminal(SynTree* st);
	};
}
#endif // include
