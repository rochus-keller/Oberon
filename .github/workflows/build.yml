name: Build ObxIDE (Windows)

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            arch: x64
            output_suffix: win64
          - os: windows-2022
            arch: x86
            output_suffix: win32

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Setup Visual Studio environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch == 'x86' && 'x86' || 'x64' }}
        
    - name: Checkout Oberon repository
      uses: actions/checkout@v4
        
    - name: Clean workspace
      run: |
        $directories = @("BUSY", "PeLib", "MonoTools", "GuiTools", "LeanQt")
        foreach ($dir in $directories) {
          if (Test-Path $dir) {
            Remove-Item $dir -Recurse -Force
          }
        }
      shell: powershell
        
    - name: Download and build BUSY
      run: |
        Invoke-WebRequest -Uri "https://github.com/rochus-keller/BUSY/archive/refs/heads/main.zip" -OutFile "busy.zip"
        Expand-Archive -Path "busy.zip" -DestinationPath "."
        Move-Item -Path "BUSY-main" -Destination "BUSY" -Force
        
        Set-Location BUSY
        cl /O2 /MD /Fe:lua.exe *.c
      shell: powershell
      
    - name: Download required dependencies
      run: |
        # Download PeLib
        if [ "${{ runner.os }}" = "Windows" ]; then
          curl -L https://github.com/rochus-keller/PeLib/archive/refs/heads/OBX.zip -o pelib.zip
          unzip pelib.zip
          mv PeLib-OBX PeLib
        else
          wget https://github.com/rochus-keller/PeLib/archive/refs/heads/OBX.tar.gz -O pelib.tar.gz
          tar -xzf pelib.tar.gz
          mv PeLib-OBX PeLib
        fi
        
        # Download MonoTools
        if [ "${{ runner.os }}" = "Windows" ]; then
          curl -L https://github.com/rochus-keller/MonoTools/archive/refs/heads/master.zip -o monotools.zip
          unzip monotools.zip
          mv MonoTools-master MonoTools
        else
          wget https://github.com/rochus-keller/MonoTools/archive/refs/heads/master.tar.gz -O monotools.tar.gz
          tar -xzf monotools.tar.gz
          mv MonoTools-master MonoTools
        fi
        
        # Download GuiTools
        if [ "${{ runner.os }}" = "Windows" ]; then
          curl -L https://github.com/rochus-keller/GuiTools/archive/refs/heads/master.zip -o guitools.zip
          unzip guitools.zip
          mv GuiTools-master GuiTools
        else
          wget https://github.com/rochus-keller/GuiTools/archive/refs/heads/master.tar.gz -O guitools.tar.gz
          tar -xzf guitools.tar.gz
          mv GuiTools-master GuiTools
        fi
        
        # Download LeanQt
        if [ "${{ runner.os }}" = "Windows" ]; then
          curl -L https://github.com/rochus-keller/LeanQt/archive/refs/heads/main.zip -o leanqt.zip
          unzip leanqt.zip
          mv LeanQt-main LeanQt
        else
          wget https://github.com/rochus-keller/LeanQt/archive/refs/heads/main.tar.gz -O leanqt.tar.gz
          tar -xzf leanqt.tar.gz
          mv LeanQt-main LeanQt
        fi
      shell: bash
      
    - name: Build ObxIDE (Windows)
      if: runner.os == 'Windows'
      run: |
        Set-Location BUSY
        .\lua.exe build.lua ..\Oberon -T ide
      shell: powershell

    - name: Build ObxIDE (Unix)
      if: runner.os != 'Windows'
      run: |
        cd BUSY
        ./lua build.lua ../Oberon -T ide
      shell: bash

      
    - name: Package artifacts
      run: |
        cd BUSY/output
        
        # Create package directory
        mkdir -p ../../artifacts
        
        # Copy built executable
        if [ "${{ runner.os }}" = "Windows" ]; then
          if [ -f ObxIDE.exe ]; then
            cp ObxIDE.exe ../../artifacts/ObxIDE_${{ matrix.output_suffix }}.exe
          fi
        else
          if [ -f ObxIDE ]; then
            cp ObxIDE ../../artifacts/ObxIDE_${{ matrix.output_suffix }}
          fi
        fi
        
        # Copy any additional required files
        if [ -d mono ]; then
          cp -r mono ../../artifacts/
        fi
      shell: bash
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ObxIDE_${{ matrix.output_suffix }}
        path: artifacts/
        retention-days: 30

