name: Build ObxIDE

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            arch: x64
            cc: gcc
            output_suffix: linux_x64
            
          # Windows builds
          - os: windows-latest
            arch: x64
            cc: cl
            output_suffix: win64
          - os: windows-latest
            arch: x86
            cc: cl
            output_suffix: win32
            
          # macOS builds
          - os: macos-latest
            arch: x64
            cc: clang
            output_suffix: macos_x64

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Create root build directory
      run: |
        mkdir -p ../build
        cd ../build
        echo "BUILD_ROOT=$(pwd)" >> $GITHUB_ENV
      shell: bash
      
    - name: Checkout Oberon repository
      uses: actions/checkout@v4
      with:
        path: ../build/Oberon
        
    - name: Setup build environment (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libxcb1-dev libx11-dev
        if [ "${{ matrix.arch }}" = "x86" ]; then
          sudo apt-get install -y gcc-multilib g++-multilib
        fi
        
    - name: Setup build environment (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup build environment (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "macOS build environment ready"
        
    - name: Download and build BUSY
      run: |
        cd $BUILD_ROOT
        
        # Download BUSY
        if [ "${{ runner.os }}" = "Windows" ]; then
          curl -L https://github.com/rochus-keller/BUSY/archive/refs/heads/master.zip -o busy.zip
          unzip busy.zip
          mv BUSY-main BUSY
        else
          wget https://github.com/rochus-keller/BUSY/archive/refs/heads/master.tar.gz -O busy.tar.gz
          tar -xzf busy.tar.gz
          mv BUSY-main BUSY
        fi
        
        # Build BUSY
        cd BUSY
        if [ "${{ runner.os }}" = "Windows" ]; then
          cl /O2 /MD /Fe:lua.exe *.c
        else
          if [ "${{ matrix.arch }}" = "x86" ] && [ "${{ runner.os }}" = "Linux" ]; then
            gcc -m32 *.c -O2 -lm -o lua
          else
            cc *.c -O2 -lm -o lua
          fi
        fi
      shell: bash
      
    - name: Download required dependencies
      run: |
        cd $BUILD_ROOT
        
        # Download PeLib
        if [ "${{ runner.os }}" = "Windows" ]; then
          curl -L https://github.com/rochus-keller/PeLib/archive/refs/heads/OBX.zip -o pelib.zip
          unzip pelib.zip
          mv PeLib-OBX PeLib
        else
          wget https://github.com/rochus-keller/PeLib/archive/refs/heads/OBX.tar.gz -O pelib.tar.gz
          tar -xzf pelib.tar.gz
          mv PeLib-OBX PeLib
        fi
        
        # Download MonoTools
        if [ "${{ runner.os }}" = "Windows" ]; then
          curl -L https://github.com/rochus-keller/MonoTools/archive/refs/heads/master.zip -o monotools.zip
          unzip monotools.zip
          mv MonoTools-master MonoTools
        else
          wget https://github.com/rochus-keller/MonoTools/archive/refs/heads/master.tar.gz -O monotools.tar.gz
          tar -xzf monotools.tar.gz
          mv MonoTools-master MonoTools
        fi
        
        # Download GuiTools
        if [ "${{ runner.os }}" = "Windows" ]; then
          curl -L https://github.com/rochus-keller/GuiTools/archive/refs/heads/master.zip -o guitools.zip
          unzip guitools.zip
          mv GuiTools-master GuiTools
        else
          wget https://github.com/rochus-keller/GuiTools/archive/refs/heads/master.tar.gz -O guitools.tar.gz
          tar -xzf guitools.tar.gz
          mv GuiTools-master GuiTools
        fi
        
        # Download LeanQt
        if [ "${{ runner.os }}" = "Windows" ]; then
          curl -L https://github.com/rochus-keller/LeanQt/archive/refs/heads/master.zip -o leanqt.zip
          unzip leanqt.zip
          mv LeanQt-main LeanQt
        else
          wget https://github.com/rochus-keller/LeanQt/archive/refs/heads/master.tar.gz -O leanqt.tar.gz
          tar -xzf leanqt.tar.gz
          mv LeanQt-main LeanQt
        fi
      shell: bash
      
    - name: Build ObxIDE
      run: |
        cd $BUILD_ROOT/BUSY
        
        # Build the IDE - now pointing to the Oberon directory at the same level
        if [ "${{ runner.os }}" = "Windows" ]; then
          ./lua.exe build.lua ../Oberon -T ide
        else
          if [ "${{ matrix.arch }}" = "x86" ] && [ "${{ runner.os }}" = "Linux" ]; then
            ./lua build.lua ../Oberon -T ide -P target_arch=x86
          else
            ./lua build.lua ../Oberon -T ide
          fi
        fi
      shell: bash
      
    - name: Package artifacts
      run: |
        cd $BUILD_ROOT/BUSY/output
        
        # Create package directory in the original workspace
        mkdir -p $GITHUB_WORKSPACE/artifacts
        
        # Copy built executable
        if [ "${{ runner.os }}" = "Windows" ]; then
          if [ -f ObxIDE.exe ]; then
            cp ObxIDE.exe $GITHUB_WORKSPACE/artifacts/ObxIDE_${{ matrix.output_suffix }}.exe
          fi
        else
          if [ -f ObxIDE ]; then
            cp ObxIDE $GITHUB_WORKSPACE/artifacts/ObxIDE_${{ matrix.output_suffix }}
          fi
        fi
        
        # Copy any additional required files
        if [ -d mono ]; then
          cp -r mono $GITHUB_WORKSPACE/artifacts/
        fi
      shell: bash
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ObxIDE_${{ matrix.output_suffix }}
        path: artifacts/
        retention-days: 30

